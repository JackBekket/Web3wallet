package com.example.web3wallet;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class SuperFactory extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b506040516130203803806130208339818101604052606081101561003357600080fd5b5080516020820151604090920151600280546001600160a01b03199081166001600160a01b039485161790915560038054821694841694909417909355600480549093169116179055612f958061008b6000396000f3fe60806040523480156200001157600080fd5b5060043610620000a05760003560e01c80637a3474e3116200006f5780637a3474e314620003275780637bb207b714620004ea5780638cda2c14146200061c5780638f8384781462000647578063c0122b0a146200068257620000a0565b80632f4f331614620000a557806353d9d91014620000e25780635538079814620001aa57806357183c8214620002f8575b600080fd5b620000ce60048036036020811015620000bd57600080fd5b50356001600160a01b0316620006ab565b604080519115158252519081900360200190f35b6200018e60048036036060811015620000fa57600080fd5b810190602081018135600160201b8111156200011557600080fd5b8201836020820111156200012857600080fd5b803590602001918460208302840111600160201b831117156200014a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505082359350505060200135620006c0565b604080516001600160a01b039092168252519081900360200190f35b6200018e600480360360a0811015620001c257600080fd5b6001600160a01b038235169160208101359160408201359190810190608081016060820135600160201b811115620001f957600080fd5b8201836020820111156200020c57600080fd5b803590602001918460018302840111600160201b831117156200022e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156200028157600080fd5b8201836020820111156200029457600080fd5b803590602001918460018302840111600160201b83111715620002b657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506200075a945050505050565b6200018e600480360360408110156200031057600080fd5b506001600160a01b038135169060200135620009b7565b6200018e600480360360a08110156200033f57600080fd5b810190602081018135600160201b8111156200035a57600080fd5b8201836020820111156200036d57600080fd5b803590602001918460208302840111600160201b831117156200038f57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295843595602086013595919450925060608101915060400135600160201b811115620003eb57600080fd5b820183602082011115620003fe57600080fd5b803590602001918460018302840111600160201b831117156200042057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156200047357600080fd5b8201836020820111156200048657600080fd5b803590602001918460018302840111600160201b83111715620004a857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550620009ed945050505050565b6200018e600480360360408110156200050257600080fd5b810190602081018135600160201b8111156200051d57600080fd5b8201836020820111156200053057600080fd5b803590602001918460018302840111600160201b831117156200055257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b811115620005a557600080fd5b820183602082011115620005b857600080fd5b803590602001918460018302840111600160201b83111715620005da57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955062000b9d945050505050565b62000645600480360360208110156200063457600080fd5b50356001600160a01b031662000d45565b005b62000670600480360360208110156200065f57600080fd5b50356001600160a01b031662000dbb565b60408051918252519081900360200190f35b62000645600480360360208110156200069a57600080fd5b50356001600160a01b031662000dd6565b60006020819052908152604090205460ff1681565b6000838383604051620006d39062000edc565b6020808201849052604082018390526060808352855190830152845182916080830191878201910280838360005b838110156200071b57818101518382015260200162000701565b50505050905001945050505050604051809103906000f08015801562000745573d6000803e3d6000fd5b509050620007538162000e51565b9392505050565b604080516003808252608082019092526000916060919060208201838038833901905050905086816000815181106200078f57fe5b6001600160a01b039283166020918202929092010152600354825191169082906001908110620007bb57fe5b6001600160a01b039283166020918202929092010152600454825191169082906002908110620007e757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600062000816828888620006c0565b90506000826000815181106200082857fe5b60200260200101519050600260009054906101000a90046001600160a01b03166001600160a01b0316636702b431828489896040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015620008dc578181015183820152602001620008c2565b50505050905090810190601f1680156200090a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156200093f57818101518382015260200162000925565b50505050905090810190601f1680156200096d5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b1580156200099157600080fd5b505af1158015620009a6573d6000803e3d6000fd5b50939b9a5050505050505050505050565b60016020528160005260406000208181548110620009d157fe5b6000918252602090912001546001600160a01b03169150829050565b600080620009fd878787620006c0565b905060008760008151811062000a0f57fe5b60200260200101519050600260009054906101000a90046001600160a01b03166001600160a01b0316636702b431828488886040518563ffffffff1660e01b815260040180856001600160a01b03166001600160a01b03168152602001846001600160a01b03166001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101562000ac357818101518382015260200162000aa9565b50505050905090810190601f16801562000af15780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101562000b2657818101518382015260200162000b0c565b50505050905090810190601f16801562000b545780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801562000b7857600080fd5b505af115801562000b8d573d6000803e3d6000fd5b50939a9950505050505050505050565b600454606080516000926001600160a01b0316908290849062000bbc57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600062000bed8260016000620006c0565b60025460048054604051636702b43160e01b81526001600160a01b0391821692810183815282861660248301526080604483019081528b5160848401528b519697509290941694636702b4319487938c938c93606482019160a40190602087019080838360005b8381101562000c6e57818101518382015260200162000c54565b50505050905090810190601f16801562000c9c5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101562000cd157818101518382015260200162000cb7565b50505050905090810190601f16801562000cff5780820380516001836020036101000a031916815260200191505b509650505050505050600060405180830381600087803b15801562000d2357600080fd5b505af115801562000d38573d6000803e3d6000fd5b5092979650505050505050565b6004546001600160a01b0316331462000d99576040805162461bcd60e51b81526020600482015260116024820152706d73672e73656e64657220213d2032464160781b604482015290519081900360640190fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526001602052604090205490565b6003546001600160a01b0316331462000e2f576040805162461bcd60e51b815260206004820152601660248201527536b9b39739b2b73232b910109e903932b83630b1b2b960511b604482015290519081900360640190fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116600081815260208181526040808320805460ff1916600190811790915533808552818452828520805492830181558552938390200180546001600160a01b0319168517905580519283529082019290925281517f4fb057ad4a26ed17a57957fa69c306f11987596069b89521c511fc9a894e6161929181900390910190a150565b6120768062000eeb8339019056fe60806040523480156200001157600080fd5b506040516200207638038062002076833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82518660208202830111640100000000821117156200008c57600080fd5b82525081516020918201928201910280838360005b83811015620000bb578181015183820152602001620000a1565b5050505091909101604090815260208301519201518551929450925084918491508160328211801590620000ef5750818111155b8015620000fb57508015155b80156200010757508115155b6200011157600080fd5b60005b8451811015620001e357600260008683815181106200012f57fe5b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161580156200018b575060006001600160a01b03168582815181106200017757fe5b60200260200101516001600160a01b031614155b6200019557600080fd5b600160026000878481518110620001a857fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000114565b508351620001f99060039060208701906200020c565b5050506004555060065550620002a09050565b82805482825590600052602060002090810192821562000264579160200282015b828111156200026457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200022d565b506200027292915062000276565b5090565b6200029d91905b80821115620002725780546001600160a01b03191681556001016200027d565b90565b611dc680620002b06000396000f3fe60806040526004361061019c5760003560e01c8063a0e67e2b116100ec578063cea086211161008a578063dc8452cd11610064578063dc8452cd146107de578063e20056e6146107f3578063ee22610b1461082e578063f059cf2b146108585761019c565b8063cea08621146106d7578063cf35225314610701578063d74f8edd146107c95761019c565b8063b77bf600116100c6578063b77bf600146105a6578063ba51a6df146105bb578063c01a8c84146105e5578063c64274741461060f5761019c565b8063a0e67e2b146104d7578063a8abe69a1461053c578063b5dc40c31461057c5761019c565b806354741525116101595780637065cb48116101335780637065cb4814610383578063784547a7146103b65780638b51d13f146103e05780639ace38c21461040a5761019c565b8063547415251461032557806367eeba0c146103595780636b0c932d1461036e5761019c565b8063025e7c27146101db578063173825d91461022157806320ea8d86146102545780632f54bf6e1461027e5780633411c81c146102c55780634bc9fdc2146102fe575b34156101d95760408051348152905133917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25b005b3480156101e757600080fd5b50610205600480360360208110156101fe57600080fd5b503561086d565b604080516001600160a01b039092168252519081900360200190f35b34801561022d57600080fd5b506101d96004803603602081101561024457600080fd5b50356001600160a01b0316610894565b34801561026057600080fd5b506101d96004803603602081101561027757600080fd5b5035610a72565b34801561028a57600080fd5b506102b1600480360360208110156102a157600080fd5b50356001600160a01b0316610bf8565b604080519115158252519081900360200190f35b3480156102d157600080fd5b506102b1600480360360408110156102e857600080fd5b50803590602001356001600160a01b0316610c0d565b34801561030a57600080fd5b50610313610c2d565b60408051918252519081900360200190f35b34801561033157600080fd5b506103136004803603604081101561034857600080fd5b508035151590602001351515610c67565b34801561036557600080fd5b50610313610cd3565b34801561037a57600080fd5b50610313610cd9565b34801561038f57600080fd5b506101d9600480360360208110156103a657600080fd5b50356001600160a01b0316610cdf565b3480156103c257600080fd5b506102b1600480360360208110156103d957600080fd5b5035610e9c565b3480156103ec57600080fd5b506103136004803603602081101561040357600080fd5b5035610f23565b34801561041657600080fd5b506104346004803603602081101561042d57600080fd5b5035610f92565b60405180856001600160a01b03166001600160a01b031681526020018481526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015610499578181015183820152602001610481565b50505050905090810190601f1680156104c65780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b3480156104e357600080fd5b506104ec611050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610528578181015183820152602001610510565b505050509050019250505060405180910390f35b34801561054857600080fd5b506104ec6004803603608081101561055f57600080fd5b5080359060208101359060408101351515906060013515156110b2565b34801561058857600080fd5b506104ec6004803603602081101561059f57600080fd5b50356111dd565b3480156105b257600080fd5b50610313611354565b3480156105c757600080fd5b506101d9600480360360208110156105de57600080fd5b503561135a565b3480156105f157600080fd5b506101d96004803603602081101561060857600080fd5b5035611409565b34801561061b57600080fd5b506103136004803603606081101561063257600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561066257600080fd5b82018360208201111561067457600080fd5b8035906020019184600183028401116401000000008311171561069657600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061158a945050505050565b3480156106e357600080fd5b506101d9600480360360208110156106fa57600080fd5b50356115a9565b34801561070d57600080fd5b506103136004803603606081101561072457600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561075457600080fd5b82018360208201111561076657600080fd5b8035906020019184600183028401116401000000008311171561078857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611622945050505050565b3480156107d557600080fd5b50610313611637565b3480156107ea57600080fd5b5061031361163c565b3480156107ff57600080fd5b506101d96004803603604081101561081657600080fd5b506001600160a01b0381358116916020013516611642565b34801561083a57600080fd5b506101d96004803603602081101561085157600080fd5b503561186d565b34801561086457600080fd5b50610313611b4d565b6003818154811061087a57fe5b6000918252602090912001546001600160a01b0316905081565b3330146108d25760405162461bcd60e51b815260040180806020018281038252602c815260200180611d66602c913960400191505060405180910390fd5b6001600160a01b038116600090815260026020526040902054819060ff16610939576040805162461bcd60e51b81526020600482015260156024820152744f776e657220646f6573206e6f742065786973742160581b604482015290519081900360640190fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b60035460001901811015610a0d57826001600160a01b03166003828154811061097f57fe5b6000918252602090912001546001600160a01b03161415610a05576003805460001981019081106109ac57fe5b600091825260209091200154600380546001600160a01b0390921691839081106109d257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610a0d565b60010161095a565b50600380546000190190610a219082611c83565b506003546004541115610a3a57600354610a3a9061135a565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff16610ace576040805162461bcd60e51b81526020600482015260156024820152744f776e657220646f6573206e6f742065786973742160581b604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff16610b40576040805162461bcd60e51b815260206004820152601d60248201527f7472616e73616374696f6e206973206e6f7420636f6e6669726d656421000000604482015290519081900360640190fd5b600084815260208190526040902060030154849060ff1615610ba9576040805162461bcd60e51b815260206004820181905260248201527f7472616e73616374696f6e20697320616c726561647920657865637574656421604482015290519081900360640190fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b60026020526000908152604090205460ff1681565b600160209081526000928352604080842090915290825290205460ff1681565b60006007546201518001421115610c475750600654610c64565b6008546006541015610c5b57506000610c64565b50600854600654035b90565b6000805b600554811015610ccc57838015610c94575060008181526020819052604090206003015460ff16155b80610cb85750828015610cb8575060008181526020819052604090206003015460ff165b15610cc4576001820191505b600101610c6b565b5092915050565b60065481565b60075481565b333014610d1d5760405162461bcd60e51b815260040180806020018281038252602c815260200180611d66602c913960400191505060405180910390fd5b6001600160a01b038116600090815260026020526040902054819060ff1615610d81576040805162461bcd60e51b81526020600482015260116024820152704f776e657220646f65732065786973742160781b604482015290519081900360640190fd5b816001600160a01b038116610dd0576040805162461bcd60e51b815260206004820152601060248201526f61646472657373206973206e756c6c2160801b604482015290519081900360640190fd5b60038054905060010160045460328211158015610ded5750818111155b8015610df857508015155b8015610e0357508115155b610e0c57600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b600080805b600354811015610f1b5760008481526001602052604081206003805491929184908110610eca57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610efe576001820191505b600454821415610f1357600192505050610f1e565b600101610ea1565b50505b919050565b6000805b600354811015610f8c5760008381526001602052604081206003805491929184908110610f5057fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610f84576001820191505b600101610f27565b50919050565b6000602081815291815260409081902080546001808301546002808501805487516101009582161595909502600019011691909104601f81018890048802840188019096528583526001600160a01b039093169590949192919083018282801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b5050506003909301549192505060ff1684565b606060038054806020026020016040519081016040528092919081815260200182805480156110a857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161108a575b5050505050905090565b6060806005546040519080825280602002602001820160405280156110e1578160200160208202803883390190505b5090506000805b60055481101561116257858015611111575060008181526020819052604090206003015460ff16155b806111355750848015611135575060008181526020819052604090206003015460ff165b1561115a578083838151811061114757fe5b6020026020010181815250506001820191505b6001016110e8565b87870360405190808252806020026020018201604052801561118e578160200160208202803883390190505b5093508790505b868110156111d2578281815181106111a957fe5b602002602001015184898303815181106111bf57fe5b6020908102919091010152600101611195565b505050949350505050565b60608060038054905060405190808252806020026020018201604052801561120f578160200160208202803883390190505b5090506000805b6003548110156112d2576000858152600160205260408120600380549192918490811061123f57fe5b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff16156112ca576003818154811061127957fe5b9060005260206000200160009054906101000a90046001600160a01b03168383815181106112a357fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506001820191505b600101611216565b816040519080825280602002602001820160405280156112fc578160200160208202803883390190505b509350600090505b8181101561134c5782818151811061131857fe5b602002602001015184828151811061132c57fe5b6001600160a01b0390921660209283029190910190910152600101611304565b505050919050565b60055481565b3330146113985760405162461bcd60e51b815260040180806020018281038252602c815260200180611d66602c913960400191505060405180910390fd5b60035481603282118015906113ad5750818111155b80156113b857508015155b80156113c357508115155b6113cc57600080fd5b60048390556040805184815290517fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a9181900360200190a1505050565b3360008181526002602052604090205460ff16611465576040805162461bcd60e51b81526020600482015260156024820152744f776e657220646f6573206e6f742065786973742160581b604482015290519081900360640190fd5b60008281526020819052604090205482906001600160a01b03166114d0576040805162461bcd60e51b815260206004820152601960248201527f7472616e73616374696f6e206973206e6f742065786974732100000000000000604482015290519081900360640190fd5b60008381526001602090815260408083203380855292529091205484919060ff161561152d5760405162461bcd60e51b8152600401808060200182810382526021815260200180611d456021913960400191505060405180910390fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a36115838561186d565b5050505050565b6000611597848484611b53565b90506115a281611409565b9392505050565b3330146115e75760405162461bcd60e51b815260040180806020018281038252602c815260200180611d66602c913960400191505060405180910390fd5b60068190556040805182815290517fc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca29181900360200190a150565b600061162f848484611b53565b949350505050565b603281565b60045481565b3330146116805760405162461bcd60e51b815260040180806020018281038252602c815260200180611d66602c913960400191505060405180910390fd5b6001600160a01b038216600090815260026020526040902054829060ff166116e7576040805162461bcd60e51b81526020600482015260156024820152744f776e657220646f6573206e6f742065786973742160581b604482015290519081900360640190fd5b6001600160a01b038216600090815260026020526040902054829060ff161561174b576040805162461bcd60e51b81526020600482015260116024820152704f776e657220646f65732065786973742160781b604482015290519081900360640190fd5b60005b6003548110156117d357846001600160a01b03166003828154811061176f57fe5b6000918252602090912001546001600160a01b031614156117cb57836003828154811061179857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506117d3565b60010161174e565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff166118c9576040805162461bcd60e51b81526020600482015260156024820152744f776e657220646f6573206e6f742065786973742160581b604482015290519081900360640190fd5b60008281526001602090815260408083203380855292529091205483919060ff1661193b576040805162461bcd60e51b815260206004820152601d60248201527f7472616e73616374696f6e206973206e6f7420636f6e6669726d656421000000604482015290519081900360640190fd5b600084815260208190526040902060030154849060ff16156119a4576040805162461bcd60e51b815260206004820181905260248201527f7472616e73616374696f6e20697320616c726561647920657865637574656421604482015290519081900360640190fd5b6000858152602081905260408120906119bc87610e9c565b905080806119ef57506002808301546000196101006001831615020116041580156119ef57506119ef8260010154611c19565b15611b445760038201805460ff1916600117905580611a175760018201546008805490910190555b815460018084015460028086018054604080516020601f600019988516156101000298909801909316949094049586018290048202840182019052848352611ac3956001600160a01b0316949291908390830182828015611ab95780601f10611a8e57610100808354040283529160200191611ab9565b820191906000526020600020905b815481529060010190602001808311611a9c57829003601f168201915b5050505050611c60565b15611af85760405187907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a2611b44565b60405187907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038201805460ff1916905580611b44576001820154600880549190910390555b50505050505050565b60085481565b600554604080516080810182526001600160a01b038681168252602080830187815283850187815260006060860181905287815280845295909520845181546001600160a01b03191694169390931783555160018301559251805192939192611bc29260028501920190611cac565b50606091909101516003909101805460ff191691151591909117905560058054600101905560405181907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a29392505050565b60006007546201518001421115611c34574260075560006008555b60065482600854011180611c4b5750600854828101105b15611c5857506000610f1e565b506001919050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b815481835581811115611ca757600083815260209020611ca7918101908301611d2a565b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ced57805160ff1916838001178555611d1a565b82800160010185558215611d1a579182015b82811115611d1a578251825591602001919060010190611cff565b50611d26929150611d2a565b5090565b610c6491905b80821115611d265760008155600101611d3056fe7472616e73616374696f6e20697320616c726561647920636f6e6669726d65642163616c6c2073686f756c6420626520696e766f6b65642066726f6d2057414c4c455420636f6e747261637421a265627a7a723158208040f9f62411611560fffec9aab468f9dc68328762149c70c97792fc559ad1e964736f6c63430005110032a265627a7a72315820926eed4fda83e43ba7a09b5dae6f9ae6e7da3b373de1960b3f2dbfff49c1b6f464736f6c63430005110032";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_GETINSTANTIATIONCOUNT = "getInstantiationCount";

    public static final String FUNC_INSTANTIATIONS = "instantiations";

    public static final String FUNC_ISINSTANTIATION = "isInstantiation";

    public static final String FUNC_CREATEWALLET = "createWallet";

    public static final String FUNC_CREATESIMPLEWALLET = "createSimpleWallet";

    public static final String FUNC_CREATEDUMMYWALLET = "createDummyWallet";

    public static final String FUNC_SETREPLACER = "setReplacer";

    public static final String FUNC_SETTWOFACTOR = "setTwoFactor";

    public static final Event CONTRACTINSTANTIATION_EVENT = new Event("ContractInstantiation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SuperFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SuperFactory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SuperFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SuperFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ContractInstantiationEventResponse> getContractInstantiationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONTRACTINSTANTIATION_EVENT, transactionReceipt);
        ArrayList<ContractInstantiationEventResponse> responses = new ArrayList<ContractInstantiationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ContractInstantiationEventResponse typedResponse = new ContractInstantiationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.instantiation = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ContractInstantiationEventResponse> contractInstantiationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ContractInstantiationEventResponse>() {
            @Override
            public ContractInstantiationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONTRACTINSTANTIATION_EVENT, log);
                ContractInstantiationEventResponse typedResponse = new ContractInstantiationEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.instantiation = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ContractInstantiationEventResponse> contractInstantiationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONTRACTINSTANTIATION_EVENT));
        return contractInstantiationEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> create(List<String> _owners, BigInteger _required, BigInteger _dailyLimit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_owners, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_required), 
                new org.web3j.abi.datatypes.generated.Uint256(_dailyLimit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getInstantiationCount(String creator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETINSTANTIATIONCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(creator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> instantiations(String param0, BigInteger param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INSTANTIATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isInstantiation(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISINSTANTIATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createWallet(List<String> _owners, BigInteger _required, BigInteger _dailyLimit, String Jid, String tel) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_owners, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_required), 
                new org.web3j.abi.datatypes.generated.Uint256(_dailyLimit), 
                new org.web3j.abi.datatypes.Utf8String(Jid), 
                new org.web3j.abi.datatypes.Utf8String(tel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSimpleWallet(String _owner, BigInteger _required, BigInteger _dailyLimit, String Jid, String tel) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATESIMPLEWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_required), 
                new org.web3j.abi.datatypes.generated.Uint256(_dailyLimit), 
                new org.web3j.abi.datatypes.Utf8String(Jid), 
                new org.web3j.abi.datatypes.Utf8String(tel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createDummyWallet(String Jid, String tel) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEDUMMYWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(Jid), 
                new org.web3j.abi.datatypes.Utf8String(tel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setReplacer(String _replacer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREPLACER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_replacer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTwoFactor(String _twoFactor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTWOFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_twoFactor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SuperFactory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuperFactory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SuperFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SuperFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SuperFactory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SuperFactory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SuperFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SuperFactory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SuperFactory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String registry_deployed, String _replacer, String _twoFactor) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registry_deployed), 
                new org.web3j.abi.datatypes.Address(_replacer), 
                new org.web3j.abi.datatypes.Address(_twoFactor)));
        return deployRemoteCall(SuperFactory.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<SuperFactory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String registry_deployed, String _replacer, String _twoFactor) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registry_deployed), 
                new org.web3j.abi.datatypes.Address(_replacer), 
                new org.web3j.abi.datatypes.Address(_twoFactor)));
        return deployRemoteCall(SuperFactory.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SuperFactory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String registry_deployed, String _replacer, String _twoFactor) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registry_deployed), 
                new org.web3j.abi.datatypes.Address(_replacer), 
                new org.web3j.abi.datatypes.Address(_twoFactor)));
        return deployRemoteCall(SuperFactory.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<SuperFactory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String registry_deployed, String _replacer, String _twoFactor) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registry_deployed), 
                new org.web3j.abi.datatypes.Address(_replacer), 
                new org.web3j.abi.datatypes.Address(_twoFactor)));
        return deployRemoteCall(SuperFactory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ContractInstantiationEventResponse extends BaseEventResponse {
        public String sender;

        public String instantiation;
    }
}
